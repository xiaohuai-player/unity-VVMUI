local data = {
	test_int = 3,
	test_float = 3.5,
	test_bool = true,
	test_string = "this is lua string",
	test_aag = "this is lua string",
	test_color = CS.UnityEngine.Color(192 / 255, 100 / 255, 60 / 255),
	test_vec2 = CS.UnityEngine.Vector2(155, 155),
	test_base_list = { "aa", "bs", "cs", "dw", "eg" },
	test_base_struct = {
		name = "test struct name",
		int_in_struct = 123,
		bool_in_struct = false,
		x = 0.0,
		y = 0.0
	},
	test_complex_list = {
		{ name = "name1", index = 10, strct = { name = "inner struct 1", inner_index = 1 } },
		{ name = "name2", index = 20, strct = { name = "inner struct 2", inner_index = 2 } },
	},
	test_complex_struct = {
		name = "test complex struct",
		int_value = 321,
		inner_struct = {
			a = "this is a",
			b = "this is b",
			inner_struct = {
				c = "this is inner c",
				d = "this is inner d"
			}
		}
	},
	test_nested_list = {
		{ { key = "[0][0]", value = 0 }, { key = "{0}{1}", value = 1 } },
		{ { key = "[1][0]", value = 2 }, { key = "{1}{1}", value = 3 } }
	}
}

local command = {
	test_changePosition = {
		type = XLuaCommandType.Void,
		execute = function(vm, param)
			vm.data.test_vec2 = CS.UnityEngine.Vector2(200, -200)
		end
	},
	test_btn = {
		type = XLuaCommandType.Void,
		can_execute = function(vm, param)
			return true
		end,
		execute = function(vm, param)
			print("before", vm.data.test_base_list[1])
			vm.data.test_base_list[1] = "test_btn clicked"
			print("after", vm.data.test_base_list[1])
		end
	},
	test_toggle = {
		type = XLuaCommandType.Bool,
		can_execute = function(vm, param)
			return true
		end,
		execute = function(vm, value, param)
			print("value of test_toggle: ", value)
			vm.data.test_bool = value
		end
	},
	test_slider = {
		type = XLuaCommandType.Float,
		can_execute = function(vm, param)
			return true
		end,
		execute = function(vm, value, param)
			print("value of test_slider: ", value)
			vm.data.test_float = value
		end
	},
	test_dropdown = {
		type = XLuaCommandType.Int,
		can_execute = function(vm, param)
			return true
		end,
		execute = function(vm, value, param)
			print("value of test_dropdown: ", value)
			vm.data.test_int = value
		end
	},
	test_input = {
		type = XLuaCommandType.String,
		can_execute = function(vm, param)
			return true
		end,
		execute = function(vm, value, param)
			print("value of test_input: ", value)
			vm.data.test_string = value
		end
	},
	test_scroll = {
		type = XLuaCommandType.Vector2,
		can_execute = function(vm, param)
			return true
		end,
		execute = function(vm, value, param)
			print("value of test_scroll: ", value.x, value.y)
			vm.data.test_base_struct.name = "test_scroll execute"
		end
	}
}

local hook = {
	before_awake = function(vm)
		print("before awake")
	end,
	after_awake = function(vm)
		print("after awake")
	end,
	before_active = function(vm)
		print("before active")
	end,
	after_active = function(vm)
		print("after active")
	end,
	before_deactive = function(vm)
		print("before deactive")
	end,
	after_deactive = function(vm)
		print("after deactive")
	end,
	before_destroy = function(vm)
		print("before destroy")
	end,
	after_destroy = function(vm)
		print("after destroy")
	end
}

return vm({
	data = data,
	command = command,
	hook = hook
})
